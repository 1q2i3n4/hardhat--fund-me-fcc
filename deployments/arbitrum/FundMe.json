{
  "address": "0x50D8B63517FcBEA065f47C8Fe868539219321D69",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe_NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0ded5d8228f0d5e1d4a8405a05c2faa578798ad8b5361eb6b7538e8b34107d2c",
  "receipt": {
    "to": null,
    "from": "0x57a9613809515E64251445E6c853f27809a8b78e",
    "contractAddress": "0x50D8B63517FcBEA065f47C8Fe868539219321D69",
    "transactionIndex": 1,
    "gasUsed": "1087059",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa900bd00ca01f316b5ef15fc7789d5313e39f89dd4f6c79796e8db175ee1242f",
    "transactionHash": "0x0ded5d8228f0d5e1d4a8405a05c2faa578798ad8b5361eb6b7538e8b34107d2c",
    "logs": [],
    "blockNumber": 57415255,
    "cumulativeGasUsed": "1087059",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x62CAe0FA2da220f43a51F86Db2EDb36DcA9A5A08"
  ],
  "numDeployments": 3,
  "solcInputHash": "59cf7648136946e1c05677afa190139a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"@author\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"\\u8fdb\\u884c\\u6ce8\\u91ca\\u89e3\\u91ca\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\u7248\\u672c\\npragma solidity ^0.8.7;\\n//\\u5bfc\\u5165...\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n//\\u62a5\\u9519\\u5408\\u7ea6_\\u9519\\u8bef\\u7c7b\\u578b\\nerror FundMe_NotOwner();\\n\\n//\\u63a5\\u53e3\\u3001\\u5e93\\u3001\\u5408\\u7ea6\\n/**@title\\n * @author\\n * @notice\\n * \\u8fdb\\u884c\\u6ce8\\u91ca\\u89e3\\u91ca\\n */\\ncontract FundMe {\\n    //\\u7c7b\\u578b\\u58f0\\u660e\\n\\n    using PriceConverter for uint256; //\\u5c06PriceConverter\\u4f5c\\u4e3a\\u4e00\\u4e2alibrary\\uff08\\u5e93\\uff09\\u9644\\u7740\\u4e8euint256\\u7c7b\\u578b\\u4e4b\\u4e0a\\n    //\\u72b6\\u6001\\u53d8\\u91cf\\n    mapping(address => uint256) private s_addressToAmountFunded; //s_\\u4ee3\\u8868\\u8be5\\u53d8\\u91cf\\u4e3apublic\\u7c7b\\u578b\\u7528storage\\u5b58\\u50a8\\uff0c\\u6b64\\u5904\\u4e3a\\u8282\\u7ea6gas\\u6539\\u4e3a\\u4e86private\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    //\\u521b\\u5efa\\u4e00\\u4e2a\\u5168\\u5c40\\u53d8\\u91cfpriceFeed\\u63a5\\u6536\\u4ece\\u6784\\u9020\\u51fd\\u6570\\u91cc\\u9762\\u4f20\\u6765\\u7684\\u4ef7\\u683c\\u6570\\u636e\\u5730\\u5740\\n    AggregatorV3Interface private s_priceFeed;\\n    //\\u6b64\\u65f6\\u4e3a\\u4e86\\u66f4\\u597d\\u7684\\u63a5\\u6536\\u4e0d\\u540c\\u7684\\u4ef7\\u683c\\u6570\\u636e\\u5730\\u5740\\uff0c\\u5728\\u6784\\u9020\\u51fd\\u6570\\u4e2d\\u6dfb\\u52a0\\u4e00\\u4e2a\\u53c2\\u6570\\uff1aaddress priceFeedAddress\\n    //\\u4fee\\u9970\\u5668\\n    modifier onlyOwner() {\\n        //\\u4f1a\\u8c03\\u7528\\u7528onlyOwner\\u6807\\u8bb0\\u7684\\u51fd\\u6570\\uff08\\u5982\\uff1a function withdraw() public onlyOwner\\uff09\\u524d\\u5148\\u8c03\\u7528\\u8be5\\u51fd\\u6570\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe_NotOwner(); //\\u8fdb\\u884c\\u62a5\\u9519\\n        _;\\n    }\\n\\n    //\\u51fd\\u6570\\n    constructor(address priceFeedAddress) {\\n        //\\u6784\\u9020\\u51fd\\u6570\\uff1a\\u5728\\u90e8\\u7f72\\u5408\\u7ea6\\u65f6\\u88ab\\u81ea\\u52a8\\u8c03\\u7528\\u7684\\u51fd\\u6570\\n        i_owner = msg.sender; //\\u4fdd\\u5b58\\u5408\\u7ea6\\u53d1\\u9001\\uff08\\u90e8\\u7f72\\uff09\\u8005\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // function getVersion() public view returns (uint256){\\n    //     // ETH/USD price feed address of Sepolia Network.\\n    //     // AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\\n    //       AggregatorV3Interface priceFeeds = priceFeed;\\n\\n    //     return priceFeeds.version();\\n    // }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    function fund() public payable {\\n        //getConversionRate\\u5728\\u8fd9\\u91cc\\u76f4\\u63a5\\u63a5\\u6536priceFeed\\u7684\\u53c2\\u6570\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    // Concepts we didn't cover yet (will cover in later sections)\\n    // 1. Enum\\n    // 2. Events\\n    // 3. Try / Catch\\n    // 4. Function Selector\\n    // 5. abi.encode / decode\\n    // 6. Hash with keccak256\\n    // 7. Yul / Assembly\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x00f6bfe0fce8d622b3d982ca87a10d2ffbf7dc910800ea5e49d7bdb3b62e80f3\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306 //\\u5206\\u53c9\\uff08fork\\uff09\\u4e00\\u4e2a\\u533a\\u5757\\u94fe\\uff0c\\u4f60\\u53ef\\u4ee5\\u5728\\u5176\\u4e2d\\u4fdd\\u7559\\u786c\\u7f16\\u7801\\u5185\\u5bb9\\n        //     //\\u6211\\u4eec\\u53ef\\u4ee5\\u5c06\\u8fd9\\u91cc\\u7684\\u5730\\u5740\\u6a21\\u5757\\u5316\\u3001\\u53c2\\u6570\\u5316\\uff0c\\u8fd9\\u6837\\u53ef\\u4ee5\\u4e0d\\u7528\\u6539\\u52a8\\u4efb\\u4f55\\u4ee3\\u7801\\u5c31\\u53ef\\u4ee5\\u90e8\\u7f72\\u5728\\u4e0d\\u540c\\u7684\\u533a\\u5757\\u94fe\\u4e0a\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xdd008f96dd1d8abed11ee0928cc369d244b5734c287ddeac32f95ad47560163c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013d2380380620013d28339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c61124c620001866000396000818161042c0152818161067b015281816106cb01526108ad015261124c6000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b77565b61033b565b6040516100d79190610d9a565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610d9a565b60405180910390f35b34801561011757600080fd5b5061012061042a565b005b34801561012e57600080fd5b5061013761066a565b6040516101449190610d9a565b60405180910390f35b34801561015957600080fd5b50610162610677565b60405161016f9190610d24565b60405180910390f35b34801561018457600080fd5b5061018d61069f565b60405161019a9190610d3f565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106c9565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610ba4565b610943565b6040516101f89190610d24565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098b90919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d7a565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610dd1565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ed57600080fd5b505afa158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190610bd1565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104af576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561055a576000600182815481106104d5576104d4611102565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105529061105b565b9150506104b2565b50600067ffffffffffffffff81111561057657610575611131565b5b6040519080825280602002602001820160405280156105a45781602001602082028036833780820191505090505b50600190805190602001906105ba929190610a67565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105e190610d0f565b60006040518083038185875af1925050503d806000811461061e576040519150601f19603f3d011682016040523d82523d6000602084013e610623565b606091505b5050905080610667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065e90610d5a565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074e576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107d257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610788575b5050505050905060005b815181101561085c5760008282815181106107fa576107f9611102565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108549061105b565b9150506107dc565b50600067ffffffffffffffff81111561087857610877611131565b5b6040519080825280602002602001820160405280156108a65781602001602082028036833780820191505090505b50905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108ef90610d0f565b60006040518083038185875af1925050503d806000811461092c576040519150601f19603f3d011682016040523d82523d6000602084013e610931565b606091505b505090508061093f57600080fd5b5050565b60006001828154811061095957610958611102565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610997836109c7565b90506000670de0b6b3a764000085836109b09190610f6f565b6109ba9190610e27565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a1057600080fd5b505afa158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190610bfe565b5050509150506402540be40081610a5f9190610e58565b915050919050565b828054828255906000526020600020908101928215610ae0579160200282015b82811115610adf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a87565b5b509050610aed9190610af1565b5090565b5b80821115610b0a576000816000905550600101610af2565b5090565b600081359050610b1d816111ba565b92915050565b600081519050610b32816111d1565b92915050565b600081359050610b47816111e8565b92915050565b600081519050610b5c816111e8565b92915050565b600081519050610b71816111ff565b92915050565b600060208284031215610b8d57610b8c611160565b5b6000610b9b84828501610b0e565b91505092915050565b600060208284031215610bba57610bb9611160565b5b6000610bc884828501610b38565b91505092915050565b600060208284031215610be757610be6611160565b5b6000610bf584828501610b4d565b91505092915050565b600080600080600060a08688031215610c1a57610c19611160565b5b6000610c2888828901610b62565b9550506020610c3988828901610b23565b9450506040610c4a88828901610b4d565b9350506060610c5b88828901610b4d565b9250506080610c6c88828901610b62565b9150509295509295909350565b610c8281610fc9565b82525050565b610c9181611025565b82525050565b6000610ca4600b83610dc0565b9150610caf82611165565b602082019050919050565b6000610cc7601b83610dc0565b9150610cd28261118e565b602082019050919050565b6000610cea600083610db5565b9150610cf5826111b7565b600082019050919050565b610d0981611005565b82525050565b6000610d1a82610cdd565b9150819050919050565b6000602082019050610d396000830184610c79565b92915050565b6000602082019050610d546000830184610c88565b92915050565b60006020820190508181036000830152610d7381610c97565b9050919050565b60006020820190508181036000830152610d9381610cba565b9050919050565b6000602082019050610daf6000830184610d00565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610ddc82611005565b9150610de783611005565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e1c57610e1b6110a4565b5b828201905092915050565b6000610e3282611005565b9150610e3d83611005565b925082610e4d57610e4c6110d3565b5b828204905092915050565b6000610e6382610fdb565b9150610e6e83610fdb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ead57610eac6110a4565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610eea57610ee96110a4565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f2757610f266110a4565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f6457610f636110a4565b5b828202905092915050565b6000610f7a82611005565b9150610f8583611005565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fbe57610fbd6110a4565b5b828202905092915050565b6000610fd482610fe5565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061103082611037565b9050919050565b600061104282611049565b9050919050565b600061105482610fe5565b9050919050565b600061106682611005565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611099576110986110a4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6111c381610fc9565b81146111ce57600080fd5b50565b6111da81610fdb565b81146111e557600080fd5b50565b6111f181611005565b81146111fc57600080fd5b50565b6112088161100f565b811461121357600080fd5b5056fea2646970667358221220db297430a0ada1cd6b049c251d55c51703a5c1455d6ccee29a6f72670c1da14564736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b77565b61033b565b6040516100d79190610d9a565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610d9a565b60405180910390f35b34801561011757600080fd5b5061012061042a565b005b34801561012e57600080fd5b5061013761066a565b6040516101449190610d9a565b60405180910390f35b34801561015957600080fd5b50610162610677565b60405161016f9190610d24565b60405180910390f35b34801561018457600080fd5b5061018d61069f565b60405161019a9190610d3f565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106c9565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610ba4565b610943565b6040516101f89190610d24565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098b90919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d7a565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610dd1565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ed57600080fd5b505afa158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190610bd1565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104af576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561055a576000600182815481106104d5576104d4611102565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105529061105b565b9150506104b2565b50600067ffffffffffffffff81111561057657610575611131565b5b6040519080825280602002602001820160405280156105a45781602001602082028036833780820191505090505b50600190805190602001906105ba929190610a67565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105e190610d0f565b60006040518083038185875af1925050503d806000811461061e576040519150601f19603f3d011682016040523d82523d6000602084013e610623565b606091505b5050905080610667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065e90610d5a565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074e576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107d257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610788575b5050505050905060005b815181101561085c5760008282815181106107fa576107f9611102565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108549061105b565b9150506107dc565b50600067ffffffffffffffff81111561087857610877611131565b5b6040519080825280602002602001820160405280156108a65781602001602082028036833780820191505090505b50905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108ef90610d0f565b60006040518083038185875af1925050503d806000811461092c576040519150601f19603f3d011682016040523d82523d6000602084013e610931565b606091505b505090508061093f57600080fd5b5050565b60006001828154811061095957610958611102565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610997836109c7565b90506000670de0b6b3a764000085836109b09190610f6f565b6109ba9190610e27565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a1057600080fd5b505afa158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190610bfe565b5050509150506402540be40081610a5f9190610e58565b915050919050565b828054828255906000526020600020908101928215610ae0579160200282015b82811115610adf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a87565b5b509050610aed9190610af1565b5090565b5b80821115610b0a576000816000905550600101610af2565b5090565b600081359050610b1d816111ba565b92915050565b600081519050610b32816111d1565b92915050565b600081359050610b47816111e8565b92915050565b600081519050610b5c816111e8565b92915050565b600081519050610b71816111ff565b92915050565b600060208284031215610b8d57610b8c611160565b5b6000610b9b84828501610b0e565b91505092915050565b600060208284031215610bba57610bb9611160565b5b6000610bc884828501610b38565b91505092915050565b600060208284031215610be757610be6611160565b5b6000610bf584828501610b4d565b91505092915050565b600080600080600060a08688031215610c1a57610c19611160565b5b6000610c2888828901610b62565b9550506020610c3988828901610b23565b9450506040610c4a88828901610b4d565b9350506060610c5b88828901610b4d565b9250506080610c6c88828901610b62565b9150509295509295909350565b610c8281610fc9565b82525050565b610c9181611025565b82525050565b6000610ca4600b83610dc0565b9150610caf82611165565b602082019050919050565b6000610cc7601b83610dc0565b9150610cd28261118e565b602082019050919050565b6000610cea600083610db5565b9150610cf5826111b7565b600082019050919050565b610d0981611005565b82525050565b6000610d1a82610cdd565b9150819050919050565b6000602082019050610d396000830184610c79565b92915050565b6000602082019050610d546000830184610c88565b92915050565b60006020820190508181036000830152610d7381610c97565b9050919050565b60006020820190508181036000830152610d9381610cba565b9050919050565b6000602082019050610daf6000830184610d00565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610ddc82611005565b9150610de783611005565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e1c57610e1b6110a4565b5b828201905092915050565b6000610e3282611005565b9150610e3d83611005565b925082610e4d57610e4c6110d3565b5b828204905092915050565b6000610e6382610fdb565b9150610e6e83610fdb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ead57610eac6110a4565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610eea57610ee96110a4565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f2757610f266110a4565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f6457610f636110a4565b5b828202905092915050565b6000610f7a82611005565b9150610f8583611005565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fbe57610fbd6110a4565b5b828202905092915050565b6000610fd482610fe5565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061103082611037565b9050919050565b600061104282611049565b9050919050565b600061105482610fe5565b9050919050565b600061106682611005565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611099576110986110a4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6111c381610fc9565b81146111ce57600080fd5b50565b6111da81610fdb565b81146111e557600080fd5b50565b6111f181611005565b81146111fc57600080fd5b50565b6112088161100f565b811461121357600080fd5b5056fea2646970667358221220db297430a0ada1cd6b049c251d55c51703a5c1455d6ccee29a6f72670c1da14564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "@author",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "进行注释解释",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}